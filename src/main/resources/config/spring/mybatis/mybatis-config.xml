<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">  
<configuration>  
   <!-- 全局参数 -->
	<settings>
		<!-- 使全局的映射器启用或禁用缓存。 -->
		<setting name="cacheEnabled" value="true"/>
		
		<!-- 全局启用或禁用延迟加载。当禁用时，所有关联对象都会即时加载。 -->
		<setting name="lazyLoadingEnabled" value="true"/>
		
		<!-- 当启用时，有延迟加载属性的对象在被调用时将会完全加载任意属性。否则，每种属性将会按需要加载。 -->
		<setting name="aggressiveLazyLoading" value="true"/>
		
		<!-- 是否允许单条sql 返回多个数据集  (取决于驱动的兼容性) default:true -->
		<setting name="multipleResultSetsEnabled" value="true"/>
		
		<!-- 是否可以使用列的别名 (取决于驱动的兼容性) default:true -->
		<setting name="useColumnLabel" value="true"/>
		
		<!-- 允许JDBC 生成主键。需要驱动器支持。如果设为了true，这个设置将强制使用被生成的主键，有一些驱动器不兼容不过仍然可以执行。  default:false  -->
		<setting name="useGeneratedKeys" value="false"/>
		
		<!-- 指定 MyBatis 如何自动映射 数据基表的列 NONE：不隐射　PARTIAL:部分  FULL:全部  -->  
		<setting name="autoMappingBehavior" value="PARTIAL"/>
		
		<!-- 这是默认的执行类型  （SIMPLE: 简单； REUSE: 执行器可能重复使用prepared statements语句；BATCH: 执行器可以重复执行语句和批量更新）  -->
		<setting name="defaultExecutorType" value="SIMPLE"/>
		
		<!-- 使用驼峰命名法转换字段。 -->
		<setting name="mapUnderscoreToCamelCase" value="true"/>
		
		<!-- 设置本地缓存范围 session:就会有数据的共享  statement:语句范围 (这样就不会有数据的共享 ) defalut:session -->
        <setting name="localCacheScope" value="SESSION"/>
		
        <!-- 设置但JDBC类型为空时,某些驱动程序 要指定值,default:OTHER，插入空值时不需要指定类型 -->
        <setting name="jdbcTypeForNull" value="NULL"/>
		
	</settings> 

    <!-- 别名定义 -->  
    <!-- <typeAliases>  
        <typeAlias alias="pageAccessURL" type="com.lgm.mybatis.model.PageAccessURL" />  
    </typeAliases>  --> 

    <!--自定义类型处理器 -->
    <!-- <typeHandlers>
		<typeHandler handler="com.xhm.util.BooleanTypeHandlder" />
		扫描整个包下的自定义类型处理器
		<package name="com.xhm.util"/>
    </typeHandlers> -->

    <!--plugins插件之 分页拦截器  -->
   <!--  <plugins>
    	<plugin interceptor="com.xhm.util.PageInterceptor"></plugin>
    </plugins> -->

    <!--配置environment环境-->
    <!-- <environments default="development">  
        环境配置1，每个SqlSessionFactory对应一个环境  
        <environment id="development1">  
            事务配置 type= JDBC、MANAGED 1.JDBC:这个配置直接简单使用了JDBC的提交和回滚设置。它依赖于从数据源得到的连接来管理事务范围。   
                2.MANAGED:这个配置几乎没做什么。它从来不提交或回滚一个连接。而它会让容器来管理事务的整个生命周期（比如Spring或JEE应用服务器的上下文）。 默认情况下它会关闭连接。然而一些容器并不希望这样，因此如果你需要从连接中停止它，将closeConnection属性设置为false  
            <transactionManager type="JDBC" />  
        	<transactionManager type="MANAGED">   
             <property name="closeConnection" value="false"/>   
             </transactionManager>  
            数据源类型：type = UNPOOLED、POOLED、JNDI 1.UNPOOLED：这个数据源的实现是每次被请求时简单打开和关闭连接。它有一点慢，这是对简单应用程序的一个很好的选择，因为它不需要及时的可用连接。   
                不同的数据库对这个的表现也是不一样的，所以对某些数据库来说配置数据源并不重要，这个配置也是闲置的 2.POOLED：这是JDBC连接对象的数据源连接池的实现，用来避免创建新的连接实例时必要的初始连接和认证时间。   
                这是一种当前Web应用程序用来快速响应请求很流行的方法。 3.JNDI：这个数据源的实现是为了使用如Spring或应用服务器这类的容器，容器可以集中或在外部配置数据源，然后放置一个JNDI上下文的引用  
            <dataSource type="UNPOOLED">  
                <property name="driver" value="com.mysql.jdbc.Driver" />  
                <property name="url" value="jdbc:mysql://localhost:3306/xhm" />  
                <property name="username" value="root" />  
                <property name="password" value="root" />  
                默认连接事务隔离级别 <property name="defaultTransactionIsolationLevel" value=""   
                    />  
            </dataSource>  
        </environment>  
  
        环境配置2  
        <environment id="development2">  
            <transactionManager type="JDBC" />  
            <dataSource type="POOLED">  
                <property name="driver" value="com.mysql.jdbc.Driver" />  
                <property name="url" value="jdbc:mysql://localhost:3306/xhm" />  
                <property name="username" value="root" />  
                <property name="password" value="root" />  
                在任意时间存在的活动（也就是正在使用）连接的数量  
                <property name="poolMaximumActiveConnections" value="10" />  
                任意时间存在的空闲连接数  
                <property name="poolMaximumIdleConnections" value="5" />  
                在被强制返回之前，池中连接被检查的时间  
                <property name="poolMaximumCheckoutTime" value="20000" />  
                这是给连接池一个打印日志状态机会的低层次设置，还有重新尝试获得连接，这些情况下往往需要很长时间（为了避免连接池没有配置时静默失败）  
                <property name="poolTimeToWait" value="20000" />  
                发送到数据的侦测查询，用来验证连接是否正常工作，并且准备接受请求。  
                <property name="poolPingQuery" value="NO PING QUERY SET" />  
                这是开启或禁用侦测查询。如果开启，你必须用一个合法的SQL语句（最好是很快速的）设置poolPingQuery属性  
                <property name="poolPingEnabled" value="false" />  
                这是用来配置poolPingQuery多次时间被用一次。这可以被设置匹配标准的数据库连接超时时间，来避免不必要的侦测  
                <property name="poolPingConnectionsNotUsedFor" value="0" />  
            </dataSource>  
        </environment>  
  
        环境配置3  
        <environment id="development3">  
            <transactionManager type="JDBC" />  
            <dataSource type="JNDI">  
                <property name="data_source" value="java:comp/env/jndi/mybatis" />  
                <property name="env.encoding" value="UTF8" />  
                <property name="initial_context" value=""/> <property name="env.encoding"   
                    value="UTF8"/>  
            </dataSource>  
        </environment>  
    </environments>   -->
  
    <!-- 映射文件，mapper的配置文件 -->  
    <!-- <mappers>
		直接映射到相应的mapper文件
		<mapper resource="com/xhm/mapper/UserMapper.xml"/>
		扫描包路径下所有xxMapper.xml文件
		<package name="com.xhm.mapper"/>
    </mappers>  --> 
      
</configuration>  